#!/usr/bin/env python
# coding: utf-8

# # Этот файл – описание заданий и дата-сетов 

# # Библиотеки 

# In[4]:


import pandas as pd 


# # Дата-сеты и их описание
# 
# ##  Assessment 
# 
# Этот файл содержит информацию об оценках в тесте.  
# Обычно каждый предмет в семестре включает ряд тестов с оценками, за которыми следует заключительный экзаменационный тест (экзамен)
# 
# - <span style="color:green"> code_module </span> — идентификационный код предмета.  
# 
# 
# - <span style="color:green">code_presentation </span> — семестр (Идентификационный код).
# 
# 
# - <span style="color:green">id_assessment </span> — тест (Идентификационный номер ассессмента). 
# 
# 
# - <span style="color:green">assessment_type </span> — тип теста. Существуют три типа оценивания: оценка преподавателя (TMA),    
#     компьютерная оценка (СМА), экзамен по курсу (Exam).  
#     
# 
# - <span style="color:green">date </span> — информация об окончательной дате сдачи теста.     
# Рассчитывается как количество дней с момента начала семестра. Дата начала семестра имеет номер 0 (ноль).  
# 
# 
# - <span style="color:green">weight </span> — вес теста в % в оценке за курс.    
# Обычно экзамены рассматриваются отдельно и имеют вес 100%; сумма всех остальных оценок составляет 100%.
# 
# 
# ## Courses 
# 
# Файл содержит список предметов по семестрам
# 
# - <span style="color:green"> code_module </span> — предмет (идентификационный код).  
# 
# 
# - <span style="color:green"> code_presentation </span> — семестр (идентификационный код).  
# 
# 
# - <span style="color:green"> module_presentation_length </span>  — продолжительность семестра в днях.
# 
# 
# ## Student Assessment
# 
# Этот файл содержит результаты тестов студентов.  
# Если учащийся не отправляет работу на оценку, результат не записывается в таблицу
# 
# - <span style="color:green">id_assessment </span> — тест (идентификационный номер).
# 
# 
# - <span style="color:green">id_student </span> — идентификационный номер студента.
# 
# 
# - <span style="color:green">date_submitted </span> — дата сдачи теста студентом, измеряемая как количество дней с начала семестра.
# 
# 
# - <span style="color:green">is_banked </span> — факт перезачета теста с прошлого семестра   
# (иногда курсы перезачитывают студентам, вернувшимся из академического отпуска).
# 
# 
# - <span style="color:green">score </span> — оценка учащегося в этом тесте. Диапазон составляет от 0 до 100.  
# Оценка ниже 40 неудачная/неуспешная сдача теста.
# 
# 
# 
# ## Student Registration
# 
# Этот файл содержит информацию о времени, когда студент зарегистрировался для прохождения курса в семестре
# 
# - <span style="color:green">code_module </span> — предмет (идентификационный код). 
# 
# 
# - <span style="color:green">code_presentation </span> — семестр (идентификационный код).
# 
# 
# - <span style="color:green">id_student </span> — идентификационный номер студента.
# 
# 
# - <span style="color:green">date_registration </span> — дата регистрации студента.  
# Это количество дней, измеренное от начала семестра  
#     (например, отрицательное значение -30 означает, что студент зарегистрировался на прохождение курса за 30 дней до его начала).
#     
# 
# - <span style="color:green">date_unregistration </span> — дата отмены регистрации студента с предмета.  
#     У студентов, окончивших курс, это поле остается пустым.

# # Список заданий
# 
# Продакт-менеджер Василий попросил вас проанализировать завершенные уроки и ответить на следующие вопросы:
# 
# 1. *Сколько студентов успешно сдали только один курс?* (Успешная сдача — это зачёт по курсу на экзамене) 
# 
# 
# 2. *Выяви самый сложный и самый простой экзамен*: найди курсы и экзамены в рамках курса, которые обладают самой низкой и самой высокой завершаемостью. 
# 
# 
# 3. *По каждому предмету определи средний срок сдачи экзаменов* (под сдачей понимаем последнее успешное прохождение экзамена студентом). 
# 
# 
# 4. *Выяви самые популярные курсы (ТОП-3) по количеству регистраций на них*. А также курсы с самым большим оттоком (ТОП-3). 
# 
# 
# 5. Напиши функцию на python, позволяющую строить *когортный (семестровый) анализ*. В период с начала 2013 по конец 2014 выяви семестр с самой низкой завершаемостью курсов и самыми долгими средними сроками сдачи курсов.
# 
# 
# 6. Часто для качественного анализа аудитории использую подходы, основанные на сегментации. Используя python, построй адаптированные RFM-кластеры студентов, чтобы качественно оценить свою аудиторию. В адаптированной кластеризации можешь выбрать следующие метрики: R - среднее время сдачи одного экзамена, F - завершаемость курсов, M - среднее количество баллов, получаемое за экзамен. Подробно опиши, как ты создавал кластеры. Для каждого RFM-сегмента построй границы метрик recency, frequency и monetary для интерпретации этих кластеров. Пример такого описания: RFM-сегмент 132 (recency=1, frequency=3, monetary=2) имеет границы метрик recency от 130 до 500 дней, frequency от 0.1 до 0.5, monetary от 55 до 72 баллов.

# # Грузим дата-сеты

# In[5]:


import pandas as pd 
assesments = pd.read_csv('/home/jupyter-v-ankushev-18/Project_2_online/assessments.csv')
courses = pd.read_csv('/home/jupyter-v-ankushev-18/Project_2_online/courses.csv')
student_assesment = pd.read_csv('/home/jupyter-v-ankushev-18/Project_2_online/studentAssessment.csv')
student_registration = pd.read_csv('/home/jupyter-v-ankushev-18/Project_2_online/studentRegistration.csv')


# # Связываем дата-сеты

# In[6]:


courses_reg = pd.merge(courses,student_registration,on=['code_module', 'code_presentation'])
ocenki = pd.merge(courses_reg, assesments,on= ['code_module', 'code_presentation'])
full_ocenki = pd.merge(ocenki, student_assesment,on=['id_assessment', 'id_student'])

